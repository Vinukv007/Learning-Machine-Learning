# -*- coding: utf-8 -*-
"""ml yt vid8 single variate.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XsfF4uAgB8Aihd62W3cjJIrGdWoTadV0
"""

import numpy as np
import pandas as pd
from google.colab import files

files.upload()

df=pd.read_csv('insurance_data.csv')
df.head()

x=df[['age']]
y=df.bought_insurance

from sklearn.model_selection import train_test_split

xt,xd, yt,yd= train_test_split(x,y,train_size=0.9,random_state=1)

from sklearn.linear_model import LogisticRegression, LinearRegression
lg=LogisticRegression()
lreg=LinearRegression()

yt

lg.fit(xt,yt)

import seaborn as sns
sns.scatterplot(df.age,df.bought_insurance)

lg.predict(xt)

import matplotlib.pyplot as plt

lg.predict_proba(xt)

lg.score(xd,yd)

lg.predict(xt)

lreg.fit(xt,yt)

lreg.score(xd,yd)

sns.scatterplot(df.age,lg.predict(df[['age']]))

xt.shape

df.age.shape

df[['age']].shape

# exercise
files.upload()

df=pd.read_csv('HR_comma_sep.csv')

df.head()

df.left.unique()

x=df.drop(['left','Department','salary'],axis=1)
x.head()

y=df.left

from sklearn.linear_model import LogisticRegression
lg=LogisticRegression()

xt,xd,yt,yd=train_test_split(x,y,test_size=0.2,random_state=1)

lg.fit(xt,yt)

lg.score(xd,yd)

df.Department.unique()

df.dtypes

df.salary

df.drop('salary',axis=1)

df.salary.unique()

df.head()

"""# the factors that are impacting the retention levels are satisfaction level, average monthly hours, promotion and salary


"""

df.columns

x_demo=df[['satisfaction_level','average_montly_hours','promotion_last_5years','salary']]
y=df.left

dummies=pd.get_dummies(x_demo.salary)

x=pd.concat([x_demo,dummies],axis=1)
x.head()

x.drop('salary',axis=1,inplace=True)
x.head()

len(x)

xt,xd,yt,yd=train_test_split(x,y,test_size=0.1,random_state=0)

lg.fit(xt,yt)

lg.score(xd,yd)

### scaling work hours. 
from sklearn.preprocessing import MinMaxScaler
mms=MinMaxScaler()

x['hour_scaled']=mms.fit_transform(x[['average_montly_hours']])
x.head()

xnew=x.drop('average_montly_hours',axis=1)

xt,xd,yt,yd=train_test_split(xnew,y,test_size=0.1,random_state=0)

lg.fit(xt,yt)

lg.score(xd,yd)

lg.score(xt,yt)

df.promotion_last_5years.unique()

x['satis_scaled']=mms.fit_transform(x[['satisfaction_level']])

x.head()

xnew1=x.drop(['average_montly_hours','satisfaction_level'],axis=1)

xt,xd,yt,yd=train_test_split(xnew1,y,test_size=0.1,random_state=0)

lg.fit(xt,yt)

lg.score(xd,yd)

